"""
@author: Ashutosh Mishra | ashutosh_mishra_@outlook.com
@created: 1 Sep 2022
@last_modified: 03 Jun 2025
@desc: pytest configuration file;
    Contains pytest automation framework configurations say: setup, driver_setup, etc.
"""


import os.path
from datetime import datetime
import sys
import pytest
from src.config import config
from src.utilities.Logger import Logger
from src.utilities.WDF import WebDriverFactory
from src.utilities.SD import SeleniumDriver
import src.config.config as Config
from selenium.common.exceptions import SessionNotCreatedException

# get the logger first
log = Logger().get_logger()


@pytest.fixture()
def setup():
    log.debug(f"Running method level setup")
    yield
    log.debug("Running method level teardown")


@pytest.fixture(scope="class")
def get_web_driver(request, get_browser_name, get_app_url):
    """
    Make sure to use this fixture in the test class
    Or 
    For Entire session (for improved performance)
    """
    log.debug("Running class level fixture get_web_driver")
    global driver

    # Try to fetch driver now
    try:
        log.info(f"Installing and getting the web driver for '{get_browser_name}' ...")
        driver = WebDriverFactory(get_browser_name).install_and_get_web_driver()

        # If we got the web driver successfully
        if driver is not False:
            driver.maximize_window()
            driver.get(get_app_url)

            # Set this web driver to all the request classes
            if request.cls is not None:
                request.cls.driver = driver

            # yield the driver now
            yield driver

        else:
            log.error("[CONFTEST.PY] Error getting web driver. Quitting ...")
            sys.exit(1)
            
    except SessionNotCreatedException as e:
        log.error(e.msg)

    finally:
        try:
            if driver is not None:
                log.info("Quitting the web-driver.")
                driver.quit()

            log.debug("Running class teardown")
            log.debug(f"Exiting now ...\n")
        except NameError as e:
            log.error(f"[CONFTEST.PY] Error while quitting the driver: {e}")



# =================================================================
# Pytest command line options
# All the args/param at the cli execution time
# =================================================================
def pytest_addoption(parser):
    parser.addoption("--browser", action="store", default=config.BROWSER,
                     help="Provide the browser name from [chrome, firefox, ie, edge]")
    parser.addoption("--url", action="store", default=config.APP_URL,
                     help="Provide web url in <address>:<port> format. Example: localhost:8080 or 127.0.0.1:8080")


@pytest.fixture(scope='session')
def get_browser_name(request):
    return request.config.getoption("--browser")


@pytest.fixture(scope='session')
def get_app_url(request):
    config.APP_URL = request.config.getoption("--url")
    return request.config.getoption("--url")


# =================================================================
# Generate the screenshot for each function
# =================================================================
@pytest.fixture(scope='function', autouse=True)
def take_screenshot(request):
    # Fixture to run after each function to take screenshots.
    yield
    # Function call to take screenshot.
    screenshot_path = Config.SCREENSHOT_LOCATION
    screenshot_file = f"{request.node.nodeid}_{datetime.now().strftime(f'{Config.DATETIME_STAMP_PATTERN}')}.png"
    SeleniumDriver(request.cls.driver).get_screenshot(filename=os.path.join(screenshot_path, screenshot_file))


# =================================================================
# Report Title for HTML report generated by 'Pytest-html' plugin
# =================================================================
def pytest_html_report_title(report):
    # Fetching the report title from the 'Config.py' for pytest-html report
    report.title = Config.PYTEST_REPORT_TITLE
    # [DEBUG]
    # print(report, report.__dir__())
    # print(f"RESULT: {report.results}, ERROR: {report.errors}, FAILED: {report.failed}, PASSED: {report.passed}")


# =========================================================================
# DO NOT TOUCH IF NOT SURE;
# Incase, I want to make sure about all the resources and pre-requisite,
# Then we can write things inside the following function to make sure,
# otherwise, exit the entire execution
# =========================================================================
@pytest.fixture(scope="session", autouse=True)
def sanity_check(request):
    good_condition = True   # Just hard-coding; assuming condition is always good
    if not good_condition:
        log.debug(f"Exiting now ...\n\n")
        pytest.exit("Write your Error message here, bcz condition is not good enough")
